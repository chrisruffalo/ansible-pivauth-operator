---
- name: Test for existance of proxy-certs secret and skip creation if it exists
  set_fact:
    proxy_certs_secret: "{{ lookup('k8s', kind='Secret', namespace=meta.namespace, resource_name=meta.name + '-proxy-certs') }}"

# whole block for creating secret
- block:
  - name: Set user fact that keeps us from having to escape the username all the time
    set_fact:
      system_user: 'system:proxy'

  - name: Create shared signer certificate
    command: "/opt/ansible/oc adm ca create-signer-cert --cert=/tmp/{{ meta.name }}/proxyca.crt --key=/tmp/{{ meta.name }}/proxyca.key --name='openshift-proxy-signer@`date +%s`' --serial=/tmp/{{ meta-name }}/proxyca.serial.txt"

  - name: Create api config for shared secret
    command: "/opt/ansible/oc adm create-api-client-config --certificate-authority=/tmp/{{ meta.name }}/proxyca.crt --client-dir=/tmp/{{ meta.name }} --signer-cert=/tmp/{{ meta.name }} proxyca.crt --signer-key=/tmp/{{ meta.name }}/proxyca.key --signer-serial=/tmp/{{ meta.name }}/proxyca.serial.txt --user='{{ system_user }}'"

  - name: Create certificate bundle
    shell: "cat /tmp/{{ meta.name }}/{{ system_user }}.crt /tmp/{{ meta.name }}/{{ system_user }}.key > /tmp/{{ meta.name }}/piv_proxy.pem"

  - name: Create the proxy-certs secret #(todo: which may need to go into the controller's namespace)
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: "{{ meta.name }}-proxy-certs"
          namespace: "{{ meta.namespace }}"
          labels:
            app: pivauth
        type: opaque
        data:
          "piv_proxy.crt": "{{ lookup('file', '/tmp/' + meta.name + '/' + system_user + '.crt') }}"
          "piv_proxy.key": "{{ lookup('file', '/tmp/' + meta.name + '/' + system_user + '.key') }}"
          "piv_proxy.pem": "{{ lookup('file', '/tmp/' + meta.name + '/piv_proxy.pem' ) }}"

  - name: Remove folder so that if regeneration is needed we can do it
    file:
      path: "/tmp/{{ meta.name }}"
      state: absent

  # execute block when the secret is missing for the target namespace/name
  when: proxy_certs_secret | default([]) | length < 1
