---
- name: Test for existance of proxy-certs secret and skip creation if it exists
  set_fact:
    kube_root_ca: "{{ lookup('k8s', kind='ConfigMap', namespace='kube-system', resource_name='root-ca') }}"
    proxy_certs_secret: "{{ lookup('k8s', kind='Secret', namespace=namespace, resource_name=meta.name + '-pivproxy-proxy-certs') }}"

# whole block for creating secret
- block:
  - name: Set user fact that keeps us from having to escape the username all the time
    set_fact:
      system_user: 'system:proxy'

  - name: Create shared signer certificate
    command: "/opt/ansible/oc adm ca create-signer-cert --cert=/tmp/{{ meta.name }}/proxyca.crt --key=/tmp/{{ meta.name }}/proxyca.key --name='openshift-proxy-signer@`date +%s`' --serial=/tmp/{{ meta.name }}/proxyca.serial.txt"

  - name: Create api config for shared secret
    command: "/opt/ansible/oc adm create-api-client-config --certificate-authority=/tmp/{{ meta.name }}/proxyca.crt --client-dir=/tmp/{{ meta.name }} --signer-cert=/tmp/{{ meta.name }}/proxyca.crt --signer-key=/tmp/{{ meta.name }}/proxyca.key --signer-serial=/tmp/{{ meta.name }}/proxyca.serial.txt --user='{{ system_user }}'"

  - name: Create certificate bundle
    shell: "cat /tmp/{{ meta.name }}/{{ system_user }}.crt /tmp/{{ meta.name }}/{{ system_user }}.key > /tmp/{{ meta.name }}/piv_proxy.pem"

  - name: "Get the openshift-authentication secret"
    set_fact:
  
  - name: Create the proxy-certs secret #(todo: which may need to go into the controller's namespace)
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: "{{ meta.name }}-pivproxy-proxy-certs"
          namespace: "{{ namespace }}"
          labels:
            app: "{{ meta.name }}-pivauth"
        type: opaque
        data:
          "proxyca.crt": "{{ lookup('file', '/tmp/' + meta.name + '/proxyca.crt' ) | b64encode }}"
          "piv_proxy.pem": "{{ lookup('file', '/tmp/' + meta.name + '/piv_proxy.pem' ) | b64encode }}"
          "master-ca.crt": "{{ kube_root_ca.data['ca.crt'] | b64encode }}"

  - name: Remove folder so that if regeneration is needed we can do it
    file:
      path: "/tmp/{{ meta.name }}"
      state: absent

  # execute block when the secret is missing for the target namespace/name
  when: proxy_certs_secret | default([]) | length < 1

- name: Ensure the root-ca value is updated if the proxy values are already available
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ meta.name }}-pivproxy-proxy-certs"
        namespace: "{{ namespace }}"
        labels:
          app: "{{ meta.name }}-pivauth"
      type: opaque
      data:
        "proxyca.crt": "{{ proxy_certs_secret.data['proxyca.crt'] }}"
        "piv_proxy.pem": "{{ proxy_certs_secret.data['piv_proxy.pem'] }}"
        "master-ca.crt": "{{ kube_root_ca.data['ca.crt'] | b64encode }}"
  when: proxy_certs_secret | default([]) | length > 0

