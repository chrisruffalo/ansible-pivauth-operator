---
- name: Create service to attach to pod
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        annotations:
          service.alpha.openshift.io/serving-cert-secret-name: "{{ meta.name }}-pivauth-certs"
        labels:
          app: "{{ meta.name }}-pivauth"
        name: "{{ meta.name }}-pivauth-service"
        namespace: "{{ namespace }}"
      spec:
        type: ClusterIP
        ports:
        - name: "{{ meta.name }}-pivauth-port"
          port: 443
          protocol: TCP
          targetPort: 8443
        selector:
          app: "{{ meta.name }}-pivauth"

- name: Create default route for service
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Route
      metadata:
        labels:
          app: "{{ meta.name }}-pivauth"
        name: "{{ meta.name }}-pivauth-route"
        namespace: "{{ namespace }}"
      spec:
        port:
          targetPort: "{{ meta.name }}-pivauth-port"
        tls:
          termination: passthrough
        to:
          kind: Service
          name: "{{ meta.name }}-pivauth-service"
          weight: 100
        wildcardPolicy: None      
  when: auth_url is not defined

# read url and decide if it is different, if it is delete the route and remake it
- block:
  - name: "Check for existing auth route"
    set_fact:
      check_auth_route: "{{ lookup('k8s', kind='Route', namespace=namespace, resource_name=meta.name + '-pivauth-route') }}"

  - name: "Delete route if it is already there"
    k8s:
      state: absent
      name: "{{ meta.name }}-pivauth-route"
      namespace: "{{ namespace }}"
      kind: Route
      api_version: v1
    when: check_auth_route | default([]) | length > 1

  - name: "Create route at {{ auth_url | default ('undefined/skip') }} for service"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Route
        metadata:
          labels:
            app: "{{ meta.name }}-pivauth"
          name: "{{ meta.name }}-pivauth-route"
          namespace: "{{ namespace }}"        
        spec:
          host: "{{ auth_url }}"
          port:
            targetPort: "{{ meta.name }}-pivauth-port"
          tls:
            termination: passthrough
          to:
            kind: Service
            name: "{{ meta.name }}-pivauth-service"
            weight: 100
          wildcardPolicy: None      
  when: auth_url is defined

# this unifies the logic and allows us to read the host from one that was picked automatically
- name: "Read auth URLs from Route"
  set_fact:
    auth_route: "{{ lookup('k8s', kind='Route', namespace=namespace, resource_name=meta.name + '-pivauth-route') }}"
    console_route: "{{ lookup('k8s', kind='Route', namespace='openshift-console', resource_name='console') }}"

- name: "Use auth URL from Route"
  set_fact:
    auth_url: "{{ auth_route.spec.host }}"
    console_url: "{{ console_route.spec.host }}"

- name: "Create configuration data"
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        labels:
          app: "{{ meta.name }}-pivauth"
        name: "{{ meta.name }}-pivauth-config"
        namespace: "{{ namespace }}"
      data: {} # empty data as a placeholder      

- name: "Create deployment for application"
  k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ meta.name }}-pivauth-proxy"
        namespace: "{{ namespace }}"
        labels:
          app: "{{ meta.name }}-pivauth"
      spec:
        replicas: "{{ replicas }}"
        selector:
          matchLabels:
            app: "{{ meta.name }}-pivauth"
        template:
          metadata:
            labels:
              app: "{{ meta.name }}-pivauth"
          spec:
            containers:
            - name: pivauth-proxy
              image: "image-registry.openshift-image-registry.svc:5000/{{ namespace }}/{{ meta.name }}-pivauth-image:latest"
              ports:
              - containerPort: 8080
                protocol: TCP
              - containerPort: 8443
                protocol: TCP
              env:
              - name: PIVPROXY_PUBLIC_URL
                value: "{{ auth_url }}"
              - name: MASTER_PUBLIC_URL
                value: "{{ console_url }}"
              - name: BASE_NAME
                value: "{{ meta.name }}-pivauth"
              livenessProbe:
                httpGet:
                  path: /healthz.html
                  port: 8443
                  scheme: HTTPS
                initialDelaySeconds: 3
                periodSeconds: 30
              readinessProbe:
                httpGet:
                  path: /healthz.html
                  port: 8443
                  scheme: HTTPS
                initialDelaySeconds: 3
                periodSeconds: 30
              volumeMounts:
              - mountPath: /secrets
                name: "{{ meta.name }}-pivauth-secret-mount"
                readOnly: true
              - mountPath: /piv
                name: "{{ meta.name }}-pivauth-smartcard-ca-mount"
                readOnly: true
              - mountPath: /client_secrets
                name: "{{ meta.name }}-pivproxy-proxy-certs-mount"
                readOnly: true
              - mountPath: /config
                name: "{{ meta.name }}-pivauth-config-mount"
                readOnly: true                
            volumes:
            - name: "{{ meta.name }}-pivauth-secret-mount"
              secret:
                secretName: "{{ meta.name }}-pivauth-certs"
                defaultMode: 440
            - name: "{{ meta.name }}-pivauth-smartcard-ca-mount"
              secret:
                secretName: "{{ meta.name }}-pivauth-smartcard-ca"
                defaultMode: 440
            - name: "{{ meta.name }}-pivproxy-proxy-certs-mount"
              secret:
                secretName: "{{ meta.name }}-pivproxy-proxy-certs"
                defaultMode: 440
            - name: "{{ meta.name }}-pivauth-config-mount"
              configMap:
                name: "{{ meta.name }}-pivauth-config"
                defaultMode: 440